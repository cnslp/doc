public class SyncExample implements Runnable {

    private String name;
    private Object prev;
    private Object self;

    private SyncExample(String name, Object prev, Object self) {
        this.name = name;
        this.prev = prev;
        this.self = self;
    }

    public void run() {
        int count = 10;
//		程序运行的主要过程就是A线程最先运行，持有C,A对象锁，后释放A,C锁，唤醒B
//		线程B等待A锁，再申请B锁，后打印B，再释放B，A锁，唤醒C，线程C等待B锁，再申请C锁，后打印C，再释放C,B锁，唤醒A。
        while (count > 0) {//总共运行次数为10次，说明每次while循环都执行了三次打印name的操作
            synchronized (prev) {//c//a
                synchronized (self) {//a//b
                    System.out.print(name + '\n');//A//B
                    count--;//9//8
                    self.notify();//pa.notify()
                }
                try {
                    prev.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static void main(String[] args) throws Exception {
        Object a = new Object();
        Object b = new Object();
        Object c = new Object();
        SyncExample pa = new SyncExample("A", c, a);
        SyncExample pb = new SyncExample("B", a, b);
        SyncExample pc = new SyncExample("C", b, c);

        new Thread(pa, "线程1").start();//相当于pa.start()
        Thread.sleep(1000);
        new Thread(pb, "线程2").start();
        Thread.sleep(1000);
        new Thread(pc, "线程3").start();
        Thread.sleep(1000);
    }
}
